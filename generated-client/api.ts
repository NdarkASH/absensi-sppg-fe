/* tslint:disable */
/* eslint-disable */
/**
 * Absensi API
 * Dokumentasi API untuk aplikasi absensi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AppResponseAttendanceResponse
 */
export interface AppResponseAttendanceResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseAttendanceResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseAttendanceResponse
     */
    'message'?: string;
    /**
     * 
     * @type {AttendanceResponse}
     * @memberof AppResponseAttendanceResponse
     */
    'data'?: AttendanceResponse;
}
/**
 * 
 * @export
 * @interface AppResponseAuthResponse
 */
export interface AppResponseAuthResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseAuthResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseAuthResponse
     */
    'message'?: string;
    /**
     * 
     * @type {AuthResponse}
     * @memberof AppResponseAuthResponse
     */
    'data'?: AuthResponse;
}
/**
 * 
 * @export
 * @interface AppResponseDashboardResponse
 */
export interface AppResponseDashboardResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseDashboardResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseDashboardResponse
     */
    'message'?: string;
    /**
     * 
     * @type {DashboardResponse}
     * @memberof AppResponseDashboardResponse
     */
    'data'?: DashboardResponse;
}
/**
 * 
 * @export
 * @interface AppResponseDateResponse
 */
export interface AppResponseDateResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseDateResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseDateResponse
     */
    'message'?: string;
    /**
     * 
     * @type {DateResponse}
     * @memberof AppResponseDateResponse
     */
    'data'?: DateResponse;
}
/**
 * 
 * @export
 * @interface AppResponseEmployeeResponse
 */
export interface AppResponseEmployeeResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseEmployeeResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseEmployeeResponse
     */
    'message'?: string;
    /**
     * 
     * @type {EmployeeResponse}
     * @memberof AppResponseEmployeeResponse
     */
    'data'?: EmployeeResponse;
}
/**
 * 
 * @export
 * @interface AppResponseListDashboardResponse
 */
export interface AppResponseListDashboardResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseListDashboardResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseListDashboardResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<DashboardResponse>}
     * @memberof AppResponseListDashboardResponse
     */
    'data'?: Array<DashboardResponse>;
}
/**
 * 
 * @export
 * @interface AppResponsePagingResponseAttendanceResponse
 */
export interface AppResponsePagingResponseAttendanceResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponsePagingResponseAttendanceResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponsePagingResponseAttendanceResponse
     */
    'message'?: string;
    /**
     * 
     * @type {PagingResponseAttendanceResponse}
     * @memberof AppResponsePagingResponseAttendanceResponse
     */
    'data'?: PagingResponseAttendanceResponse;
}
/**
 * 
 * @export
 * @interface AppResponsePagingResponseDateResponse
 */
export interface AppResponsePagingResponseDateResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponsePagingResponseDateResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponsePagingResponseDateResponse
     */
    'message'?: string;
    /**
     * 
     * @type {PagingResponseDateResponse}
     * @memberof AppResponsePagingResponseDateResponse
     */
    'data'?: PagingResponseDateResponse;
}
/**
 * 
 * @export
 * @interface AppResponseString
 */
export interface AppResponseString {
    /**
     * 
     * @type {number}
     * @memberof AppResponseString
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseString
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppResponseString
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseUserResponse
 */
export interface AppResponseUserResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponseUserResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUserResponse
     */
    'message'?: string;
    /**
     * 
     * @type {UserResponse}
     * @memberof AppResponseUserResponse
     */
    'data'?: UserResponse;
}
/**
 * 
 * @export
 * @interface AppResponseVoid
 */
export interface AppResponseVoid {
    /**
     * 
     * @type {number}
     * @memberof AppResponseVoid
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseVoid
     */
    'message'?: string;
    /**
     * 
     * @type {any}
     * @memberof AppResponseVoid
     */
    'data'?: any;
}
/**
 * 
 * @export
 * @interface AttendanceCreateRequest
 */
export interface AttendanceCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequest
     */
    'checkInDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequest
     */
    'checkOutDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequest
     */
    'status'?: AttendanceCreateRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequest
     */
    'notes'?: string;
}

export const AttendanceCreateRequestStatusEnum = {
    Alfa: 'ALFA',
    Hadir: 'HADIR',
    Izin: 'IZIN',
    Sakit: 'SAKIT'
} as const;

export type AttendanceCreateRequestStatusEnum = typeof AttendanceCreateRequestStatusEnum[keyof typeof AttendanceCreateRequestStatusEnum];

/**
 * 
 * @export
 * @interface AttendanceRequest
 */
export interface AttendanceRequest {
    /**
     * 
     * @type {string}
     * @memberof AttendanceRequest
     */
    'checkInDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceRequest
     */
    'checkOutDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceRequest
     */
    'status'?: AttendanceRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AttendanceRequest
     */
    'notes'?: string;
}

export const AttendanceRequestStatusEnum = {
    Alfa: 'ALFA',
    Hadir: 'HADIR',
    Izin: 'IZIN',
    Sakit: 'SAKIT'
} as const;

export type AttendanceRequestStatusEnum = typeof AttendanceRequestStatusEnum[keyof typeof AttendanceRequestStatusEnum];

/**
 * 
 * @export
 * @interface AttendanceResponse
 */
export interface AttendanceResponse {
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'attendanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'checkInDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'checkOutDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'status'?: AttendanceResponseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponse
     */
    'totalHours'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'dates'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponse
     */
    'user'?: string;
}

export const AttendanceResponseStatusEnum = {
    Alfa: 'ALFA',
    Hadir: 'HADIR',
    Izin: 'IZIN',
    Sakit: 'SAKIT'
} as const;

export type AttendanceResponseStatusEnum = typeof AttendanceResponseStatusEnum[keyof typeof AttendanceResponseStatusEnum];

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthResponse
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface DashboardRequest
 */
export interface DashboardRequest {
    /**
     * 
     * @type {UserRequest}
     * @memberof DashboardRequest
     */
    'userRequest'?: UserRequest;
    /**
     * 
     * @type {EmployeeRequest}
     * @memberof DashboardRequest
     */
    'employeeRequest'?: EmployeeRequest;
    /**
     * 
     * @type {AttendanceRequest}
     * @memberof DashboardRequest
     */
    'attendanceRequest'?: AttendanceRequest;
}
/**
 * 
 * @export
 * @interface DashboardResponse
 */
export interface DashboardResponse {
    /**
     * 
     * @type {UserResponse}
     * @memberof DashboardResponse
     */
    'user'?: UserResponse;
    /**
     * 
     * @type {EmployeeResponse}
     * @memberof DashboardResponse
     */
    'employee'?: EmployeeResponse;
    /**
     * 
     * @type {PagingResponseAttendanceResponse}
     * @memberof DashboardResponse
     */
    'attendance'?: PagingResponseAttendanceResponse;
}
/**
 * 
 * @export
 * @interface DateRequest
 */
export interface DateRequest {
    /**
     * 
     * @type {string}
     * @memberof DateRequest
     */
    'date': string;
    /**
     * 
     * @type {boolean}
     * @memberof DateRequest
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface DateResponse
 */
export interface DateResponse {
    /**
     * 
     * @type {string}
     * @memberof DateResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateResponse
     */
    'date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DateResponse
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface EmployeeRequest
 */
export interface EmployeeRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployeeRequest
     */
    'nik': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRequest
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeRequest
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface EmployeeResponse
 */
export interface EmployeeResponse {
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'nik'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * User email address
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PagingResponseAttendanceResponse
 */
export interface PagingResponseAttendanceResponse {
    /**
     * 
     * @type {Array<AttendanceResponse>}
     * @memberof PagingResponseAttendanceResponse
     */
    'data'?: Array<AttendanceResponse>;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseAttendanceResponse
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseAttendanceResponse
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseAttendanceResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PagingResponseDateResponse
 */
export interface PagingResponseDateResponse {
    /**
     * 
     * @type {Array<DateResponse>}
     * @memberof PagingResponseDateResponse
     */
    'data'?: Array<DateResponse>;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseDateResponse
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseDateResponse
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagingResponseDateResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequest
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'role'?: UserResponseRoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'updatedAt'?: string;
}

export const UserResponseRoleEnum = {
    Admin: 'ADMIN',
    User: 'USER'
} as const;

export type UserResponseRoleEnum = typeof UserResponseRoleEnum[keyof typeof UserResponseRoleEnum];


/**
 * AttendanceControllerApi - axios parameter creator
 * @export
 */
export const AttendanceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAttendanceByUserId: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendanceById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttendanceById', 'id', id)
            const localVarPath = `/api/v1/attendance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AttendanceCreateRequest} attendanceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttendance: async (id: string, attendanceCreateRequest: AttendanceCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadAttendance', 'id', id)
            // verify required parameter 'attendanceCreateRequest' is not null or undefined
            assertParamExists('uploadAttendance', 'attendanceCreateRequest', attendanceCreateRequest)
            const localVarPath = `/api/v1/attendance/date/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceControllerApi - functional programming interface
 * @export
 */
export const AttendanceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendanceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAttendanceByUserId(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponsePagingResponseAttendanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAttendanceByUserId(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceControllerApi.getAllAttendanceByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendanceById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseAttendanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendanceById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceControllerApi.getAttendanceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {AttendanceCreateRequest} attendanceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAttendance(id: string, attendanceCreateRequest: AttendanceCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseAttendanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttendance(id, attendanceCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceControllerApi.uploadAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendanceControllerApi - factory interface
 * @export
 */
export const AttendanceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendanceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAttendanceByUserId(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<AppResponsePagingResponseAttendanceResponse> {
            return localVarFp.getAllAttendanceByUserId(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendanceById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseAttendanceResponse> {
            return localVarFp.getAttendanceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AttendanceCreateRequest} attendanceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttendance(id: string, attendanceCreateRequest: AttendanceCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseAttendanceResponse> {
            return localVarFp.uploadAttendance(id, attendanceCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendanceControllerApi - object-oriented interface
 * @export
 * @class AttendanceControllerApi
 * @extends {BaseAPI}
 */
export class AttendanceControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceControllerApi
     */
    public getAllAttendanceByUserId(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return AttendanceControllerApiFp(this.configuration).getAllAttendanceByUserId(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceControllerApi
     */
    public getAttendanceById(id: string, options?: RawAxiosRequestConfig) {
        return AttendanceControllerApiFp(this.configuration).getAttendanceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {AttendanceCreateRequest} attendanceCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceControllerApi
     */
    public uploadAttendance(id: string, attendanceCreateRequest: AttendanceCreateRequest, options?: RawAxiosRequestConfig) {
        return AttendanceControllerApiFp(this.configuration).uploadAttendance(id, attendanceCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseAuthResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardDateControllerApi - axios parameter creator
 * @export
 */
export const DashboardDateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DateRequest} dateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDate: async (dateRequest: DateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dateRequest' is not null or undefined
            assertParamExists('createDate', 'dateRequest', dateRequest)
            const localVarPath = `/api/v1/dashboard/date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDate', 'id', id)
            const localVarPath = `/api/v1/dashboard/date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDate: async (startDate?: string, endDate?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDate: async (id: string, request: DateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDate', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('getDate', 'request', request)
            const localVarPath = `/api/v1/dashboard/date/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (request !== undefined) {
                for (const [key, value] of Object.entries(request)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDateById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDateById', 'id', id)
            const localVarPath = `/api/v1/dashboard/date/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardDateControllerApi - functional programming interface
 * @export
 */
export const DashboardDateControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardDateControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DateRequest} dateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDate(dateRequest: DateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDate(dateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardDateControllerApi.createDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardDateControllerApi.deleteDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDate(startDate?: string, endDate?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponsePagingResponseDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDate(startDate, endDate, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardDateControllerApi.getAllDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDate(id: string, request: DateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDate(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardDateControllerApi.getDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDateById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDateById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardDateControllerApi.getDateById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardDateControllerApi - factory interface
 * @export
 */
export const DashboardDateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardDateControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {DateRequest} dateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDate(dateRequest: DateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseDateResponse> {
            return localVarFp.createDate(dateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDate(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseVoid> {
            return localVarFp.deleteDate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDate(startDate?: string, endDate?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<AppResponsePagingResponseDateResponse> {
            return localVarFp.getAllDate(startDate, endDate, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDate(id: string, request: DateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseDateResponse> {
            return localVarFp.getDate(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDateById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseDateResponse> {
            return localVarFp.getDateById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardDateControllerApi - object-oriented interface
 * @export
 * @class DashboardDateControllerApi
 * @extends {BaseAPI}
 */
export class DashboardDateControllerApi extends BaseAPI {
    /**
     * 
     * @param {DateRequest} dateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDateControllerApi
     */
    public createDate(dateRequest: DateRequest, options?: RawAxiosRequestConfig) {
        return DashboardDateControllerApiFp(this.configuration).createDate(dateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDateControllerApi
     */
    public deleteDate(id: string, options?: RawAxiosRequestConfig) {
        return DashboardDateControllerApiFp(this.configuration).deleteDate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDateControllerApi
     */
    public getAllDate(startDate?: string, endDate?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DashboardDateControllerApiFp(this.configuration).getAllDate(startDate, endDate, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DateRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDateControllerApi
     */
    public getDate(id: string, request: DateRequest, options?: RawAxiosRequestConfig) {
        return DashboardDateControllerApiFp(this.configuration).getDate(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDateControllerApi
     */
    public getDateById(id: string, options?: RawAxiosRequestConfig) {
        return DashboardDateControllerApiFp(this.configuration).getDateById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardEmployeeControllerApi - axios parameter creator
 * @export
 */
export const DashboardEmployeeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeInDashboard: async (id: string, employeeRequest: EmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEmployeeInDashboard', 'id', id)
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('createEmployeeInDashboard', 'employeeRequest', employeeRequest)
            const localVarPath = `/api/v1/dashboard/user/biodata/{id}/create`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeInDashboard: async (id: string, employeeRequest: EmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployeeInDashboard', 'id', id)
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('updateEmployeeInDashboard', 'employeeRequest', employeeRequest)
            const localVarPath = `/api/v1/dashboard/user/biodata/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardEmployeeControllerApi - functional programming interface
 * @export
 */
export const DashboardEmployeeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardEmployeeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeInDashboard(id, employeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardEmployeeControllerApi.createEmployeeInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeInDashboard(id, employeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardEmployeeControllerApi.updateEmployeeInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardEmployeeControllerApi - factory interface
 * @export
 */
export const DashboardEmployeeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardEmployeeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmployeeResponse> {
            return localVarFp.createEmployeeInDashboard(id, employeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmployeeResponse> {
            return localVarFp.updateEmployeeInDashboard(id, employeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardEmployeeControllerApi - object-oriented interface
 * @export
 * @class DashboardEmployeeControllerApi
 * @extends {BaseAPI}
 */
export class DashboardEmployeeControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {EmployeeRequest} employeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardEmployeeControllerApi
     */
    public createEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig) {
        return DashboardEmployeeControllerApiFp(this.configuration).createEmployeeInDashboard(id, employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {EmployeeRequest} employeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardEmployeeControllerApi
     */
    public updateEmployeeInDashboard(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig) {
        return DashboardEmployeeControllerApiFp(this.configuration).updateEmployeeInDashboard(id, employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardUserControllerApi - axios parameter creator
 * @export
 */
export const DashboardUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserInDashboard: async (userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('createUserInDashboard', 'userRequest', userRequest)
            const localVarPath = `/api/v1/dashboard/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInDashboard: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserInDashboard', 'id', id)
            const localVarPath = `/api/v1/dashboard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [status] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserInDashboard: async (status?: boolean, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInDashboard: async (id: string, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserInDashboard', 'id', id)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getUserInDashboard', 'pageable', pageable)
            const localVarPath = `/api/v1/dashboard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restoreUser', 'id', id)
            const localVarPath = `/api/v1/dashboard/user/restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('softDelete', 'id', id)
            const localVarPath = `/api/v1/dashboard/user/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DashboardRequest} dashboardRequest 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInDashboard: async (id: string, dashboardRequest: DashboardRequest, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserInDashboard', 'id', id)
            // verify required parameter 'dashboardRequest' is not null or undefined
            assertParamExists('updateUserInDashboard', 'dashboardRequest', dashboardRequest)
            const localVarPath = `/api/v1/dashboard/{id}/update/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardUserControllerApi - functional programming interface
 * @export
 */
export const DashboardUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserInDashboard(userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserInDashboard(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.createUserInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.deleteAllUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserInDashboard(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserInDashboard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.deleteUserInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [status] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserInDashboard(status?: boolean, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseListDashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserInDashboard(status, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.getAllUserInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInDashboard(id: string, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseDashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInDashboard(id, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.getUserInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.restoreUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async softDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.softDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.softDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DashboardRequest} dashboardRequest 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserInDashboard(id: string, dashboardRequest: DashboardRequest, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseDashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserInDashboard(id, dashboardRequest, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardUserControllerApi.updateUserInDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardUserControllerApi - factory interface
 * @export
 */
export const DashboardUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserInDashboard(userRequest: UserRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.createUserInDashboard(userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUser(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseVoid> {
            return localVarFp.deleteAllUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInDashboard(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseVoid> {
            return localVarFp.deleteUserInDashboard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [status] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserInDashboard(status?: boolean, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseListDashboardResponse> {
            return localVarFp.getAllUserInDashboard(status, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInDashboard(id: string, pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseDashboardResponse> {
            return localVarFp.getUserInDashboard(id, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.restoreUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.softDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DashboardRequest} dashboardRequest 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInDashboard(id: string, dashboardRequest: DashboardRequest, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseDashboardResponse> {
            return localVarFp.updateUserInDashboard(id, dashboardRequest, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardUserControllerApi - object-oriented interface
 * @export
 * @class DashboardUserControllerApi
 * @extends {BaseAPI}
 */
export class DashboardUserControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public createUserInDashboard(userRequest: UserRequest, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).createUserInDashboard(userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public deleteAllUser(options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).deleteAllUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public deleteUserInDashboard(id: string, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).deleteUserInDashboard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [status] 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public getAllUserInDashboard(status?: boolean, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).getAllUserInDashboard(status, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public getUserInDashboard(id: string, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).getUserInDashboard(id, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public restoreUser(id: string, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).restoreUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public softDelete(id: string, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).softDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DashboardRequest} dashboardRequest 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardUserControllerApi
     */
    public updateUserInDashboard(id: string, dashboardRequest: DashboardRequest, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DashboardUserControllerApiFp(this.configuration).updateUserInDashboard(id, dashboardRequest, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmployeeControllerApi - axios parameter creator
 * @export
 */
export const EmployeeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (employeeRequest: EmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('createEmployee', 'employeeRequest', employeeRequest)
            const localVarPath = `/api/v1/employee/biodata/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/employee/biodata/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (id: string, employeeRequest: EmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployee', 'id', id)
            // verify required parameter 'employeeRequest' is not null or undefined
            assertParamExists('updateEmployee', 'employeeRequest', employeeRequest)
            const localVarPath = `/api/v1/employee/biodata/me/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeControllerApi - functional programming interface
 * @export
 */
export const EmployeeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(employeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeControllerApi.createEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeControllerApi.getEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmployeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(id, employeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeControllerApi.updateEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmployeeControllerApi - factory interface
 * @export
 */
export const EmployeeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmployeeResponse> {
            return localVarFp.createEmployee(employeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmployeeResponse> {
            return localVarFp.getEmployee(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {EmployeeRequest} employeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmployeeResponse> {
            return localVarFp.updateEmployee(id, employeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeControllerApi - object-oriented interface
 * @export
 * @class EmployeeControllerApi
 * @extends {BaseAPI}
 */
export class EmployeeControllerApi extends BaseAPI {
    /**
     * 
     * @param {EmployeeRequest} employeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public createEmployee(employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).createEmployee(employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public getEmployee(options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).getEmployee(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {EmployeeRequest} employeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeControllerApi
     */
    public updateEmployee(id: string, employeeRequest: EmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeControllerApiFp(this.configuration).updateEmployee(id, employeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegisterControllerApi - axios parameter creator
 * @export
 */
export const RegisterControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('register', 'userRequest', userRequest)
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPasswordRequest: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('resetPassword', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/api/v1/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterControllerApi - functional programming interface
 * @export
 */
export const RegisterControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegisterControllerApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegisterControllerApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RegisterControllerApi - factory interface
 * @export
 */
export const RegisterControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userRequest: UserRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.register(userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseString> {
            return localVarFp.resetPassword(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterControllerApi - object-oriented interface
 * @export
 * @class RegisterControllerApi
 * @extends {BaseAPI}
 */
export class RegisterControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterControllerApi
     */
    public register(userRequest: UserRequest, options?: RawAxiosRequestConfig) {
        return RegisterControllerApiFp(this.configuration).register(userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterControllerApi
     */
    public resetPassword(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return RegisterControllerApiFp(this.configuration).resetPassword(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('updateUser', 'userRequest', userRequest)
            const localVarPath = `/api/v1/home/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userRequest !== undefined) {
                for (const [key, value] of Object.entries(userRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userRequest: UserRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponse> {
            return localVarFp.updateUser(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUser(userRequest: UserRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUser(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



